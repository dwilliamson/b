<<The Gubberment and the new PC>>

I move into the office next Monday - meanwhile I've been keeping myself busy trawling through government websites on the requirements of being self-employed. As a result; I'm going to contact an accountant as soon as possible! There's some very basic stuff I need to do on my own, such as register as self-employed for NI contributions, however I've heard that the HMRC are pretty brutal about all this. So I need some professional advice before I do anything :) Top of my list is VAT reclaiming and contributions!

My new desk has arrived; I'll be setting that up in the new office tomorrow morning. I've also designed and ordered my new PC.

I took a few hours figuring out what parts I wanted to stick together and came to the conclusion that beyond a couple of key decisions, I shouldn't be going through the design in painful detail as my own time is worth a lot more than the gains. This is especially true when it comes to assembling it. It seems these days I can custom design and get a 3rd party to build it for me. Costs an extra 100 pounds or so but compared to my time building it and the reduced shipping costs, that seems to be a big net gain overall! And I'm still beating the cost of a pre-designed mass-market PC...

My main concerns were CPU, RAM and Storage for fast iteration development. I was looking at all the Quad core i7's and Xeons (for their nice big shared cache) and ditched them for the i5-2500k due to some great performance benchmarks vs. cost. As most software out there really is pretty poor at taking advantage of the multiple cores in your machine, the difference between the i7's and Xeons rarely show up unless you're prepared to spend some serious cash (in some cases buying an i7 will net you worse performance).

Going with 16GB of RAM (DDR3 @ 1333MHz) was a no-brainer until I started looking at using SSD's for my main storage. There's lots of anecdotal evidence out there that SSDs can increase your compile/link iteration if any of those stages are I/O bound. On my last three "AAA" projects, the linker was the ultimate killer of iteration times on the Xbox 360 but the CPUs were always relatively idle for the 2-5 minute link times you'd get - it was all disk work!

However, I'm not in that mode, and I've shown in the past that such large projects don't need to have it that bad (when I left SC:V, our compile/link times for the main renderer could be measured in 20-30 seconds, with 1-2 second iteration times). With 10s of programmers who are constantly chasing features, bugs and all manner of changes, keeping on top of your compile and link times has never, in my experience, been something that senior management will let you concentrate on. You end up with hundreds of .cpp files with one class per .cpp/.h, all of which include every file in the project and exhibit no clear rules of dependency - a perfect environment to breed I/O hell even before you hit the link stage when all of that can really be avoided.

Anyway, I'm digressing. I'll be working on a much smaller code-base and the issue won't be as pronounced but it was {this|http://www.joelonsoftware.com/items/2009/03/27.html} post by Joel Spolsky that sold SSDs to me. No compile-time improvements, but a drastic improvement in the performance of your development software and boot times - now that's what I'm talking about! So after a bit of research, I decided to get two drives: one OCZ Vertex 3 120GB (despite the slower random read/write times than the 240GB model) for the main drive and an OCZ Vertex 2 60GB for the development drive. To save a little money, I then cut my RAM from 16GB to 8GB, hoping that the 120GB SSD investment will allow me to do this.

Phew! Everything else is a largely irrelevant decision (except for avoiding Intel video cards like the plague - I have a separate Linux installation on my laptop specifically for playing Minecraft because the Intel OpenGL on Windows drivers are shamefully poor).

[disqus][/disqus]